x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"
    tag: "{{.Name}}" 
services:
  # Northwind.WebApi
  # docker compose build northwind_web-api
  northwind_web-api: 
    container_name: northwind_web-api
    build:
      context: ../../
      dockerfile: ${NORTHWIND_WEBAPI_DOCKERFILE} 
    pull_policy: build
    deploy:
      resources:
        limits:
          memory: 250M
    restart: unless-stopped
    ports:
      - "${NORTHWIND_WEBAPI_PORT}:${NORTHWIND_WEBAPI_PORT}"
    environment: 
      - TZ="Asia/Taipei"
      - PORT=${NORTHWIND_WEBAPI_PORT}
      - ASPNETCORE_HTTP_PORTS=${NORTHWIND_WEBAPI_PORT}
      - ASPNETCORE_URLS=http://*:${NORTHWIND_WEBAPI_PORT}
      - ASPNETCORE_ENVIRONMENT=Development 
      - ELASTIC_APM_PROFILER_HOME=/elastic_apm_profiler      
      - ELASTIC_APM_SERVER_URLS=http://apm-server:8200
    logging: *logging
    networks: ['tracing']
    depends_on: 
      - apm-server
        

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    container_name: setup
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: elasticsearch\n"\
          "    dns:\n"\
          "      - elasticsearch\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: fleet-server\n"\
          "    dns:\n"\
          "      - fleet-server\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    environment: 
      - TZ=${TIME_ZONE}  
    networks:
      - tracing
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    container_name: elasticsearch
    depends_on:
      setup:
        condition: service_healthy 
    environment:
      - ES_JAVA_OPTS=${ES_JAVA_OPTS}
      - TZ=${TIME_ZONE}
      # Password for the 'elastic' user (at least 6 characters)
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-}
      # Password for the 'kibana_system' user (at least 6 characters)
      # https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html
      - KIBANA_PASSWORD=${KIBANA_PASSWORD:-}
      - cluster.name=docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - network.host=0.0.0.0
      - http.host=0.0.0.0
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      # - xpack.security.authc.api_key.enabled=true
    ulimits:
      memlock:
        soft: -1
        hard: -1  
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    volumes:
     - certs:/usr/share/elasticsearch/config/certs
      # - ./data/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - tracing
  kibana:
    image: docker.elastic.co/kibana/kibana:${ELK_VERSION}
    container_name: kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - SERVERNAME=kibana
      - ES_JAVA_OPTS=${ES_JAVA_OPTS}
      - TZ=${TIME_ZONE}
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200 
      - ELASTICSEARCH_USERNAME=${KIBANA_USERNAME}
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_KIBANASERVER_HOSTNAME=localhost 
      # - SERVER_SSL_ENABLED=true
      # - SERVER_SSL_CERTIFICATE=/usr/share/kibana/config/certs/kibana/kibana.crt
      # - SERVER_SSL_KEY=/usr/share/kibana/config/certs/kibana/kibana.crt
      # - SERVER_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      # - ELASTIC_APM_SECRET_TOKEN=${ELASTIC_APM_SECRET_TOKEN} 
      - NODE_OPTIONS=''
    ulimits:
      memlock:
        soft: -1
        hard: -1  
    ports:
      - "5601:5601"
    volumes:
      - certs:/usr/share/kibana/config/certs
      # - ./config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
      # - ./data/kibana:/usr/share/kibana/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -I -s http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    mem_limit: ${MEM_LIMIT}  
    networks:
      - tracing
    
  apm-server:
    container_name: apm-server
    image: docker.elastic.co/apm/apm-server:${ELK_VERSION}
    ports:
    # - "8200:8200"
    - "6060:6060"
    user: root
    networks: ['tracing']
    restart: unless-stopped
    command: --strict.perms=false -e  # -e flag to log to stderr and disable syslog/file output
    volumes:
      - certs:/usr/share/apm-server/certs
      - ./apm-server.yml:/usr/share/apm-server/apm-server.yml:ro
    environment: 
      - TZ="Asia/Taipei"
      - output.elasticsearch.hosts=["elasticsearch:9200"]
      - output.elasticsearch.protocol=https
      - output.elasticsearch.username=${ELASTIC_USERNAME}
      - output.elasticsearch.password=${ELASTIC_PASSWORD}
      - output.elasticsearch.ssl.enabled=true
      - output.elasticsearch.ssl.certificate_authorities=/usr/share/apm-server/certs/ca/ca.crt 
      - output.elasticsearch.ssl.certificate=/usr/share/apm-server/certs/elasticsearch/elasticsearch.crt
      - output.elasticsearch.ssl.key=/usr/share/apm-server/certs/elasticsearch/elasticsearch.key
      # - apm-server.kibana.path=/apm
      # - apm-server.host=apm-server:8200
      # - apm-server.rum.enabled=true
      # - apm-server.rum.event_rate.limit=1000      
      # - apm-server.rum.allow_origins=['*']
      # - apm-server.rum.enabled=true
      # - apm-server.auth.anonymous.rate_limit.event_limit=300
      # - apm-server.auth.anonymous.rate_limit.ip_limit=1000
      # - apm-server.auth.anonymous.allow_service=northwind_web-api
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    logging:
      driver: 'json-file'
      options:
          max-size: '2m'
          max-file: '5'     
    depends_on:
      kibana:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--write-out", "'HTTP %{http_code}'", "--silent", "--output", "/dev/null", "http://localhost:8200/healthcheck"]
      interval: 10s
      timeout: 10s
      retries: 120      
networks:
  tracing:
    driver: bridge
volumes:
  certs:
    driver: local    

# https://blog.elliot.tw/?p=597
# https://github.com/elastic/elasticsearch/blob/8.14/docs/reference/setup/install/docker/docker-compose.yml
# https://www.elastic.co/blog/getting-started-with-the-elastic-stack-and-docker-compose-part-2
# https://github.com/elkninja/elastic-stack-docker-part-two

# https://www.elastic.co/guide/en/observability/8.19/get-started-with-fleet-apm-server.html
   # https://www.youtube.com/watch?v=WwOBQeiNO3w
   # https://www.youtube.com/watch?v=jRSGj65YLA8
# https://www.elastic.co/guide/en/observability/8.19/get-started-with-apm-server-binary.html
   # https://adhon-rizky.medium.com/enable-apm-on-clustered-elasticsearch-stack-8-6-x-5201d48e3fa1